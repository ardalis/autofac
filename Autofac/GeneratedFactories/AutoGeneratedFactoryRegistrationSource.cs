using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Autofac.RegistrationSources;
using Autofac.Services;
using Autofac.Registry;
using Autofac.Lifetime;
using Autofac.Disposal;
using Autofac.Activators;

namespace Autofac.GeneratedFactories
{
    public class AutoGeneratedFactoryRegistrationSource : IDynamicRegistrationSource
    {
        public bool TryGetRegistration(Service service, Func<Service, bool> registeredServicesTest, out IComponentRegistration registration)
        {
            Enforce.ArgumentNotNull(service, "service");
            Enforce.ArgumentNotNull(registeredServicesTest, "registeredServicesTest");

            var ts = service as TypedService;
            if (ts != null &&
                ts.ServiceType.IsGenericType &&
                ts.ServiceType.GetGenericTypeDefinition().FullName.StartsWith("System.Func"))
            {
                var genericArgs = ts.ServiceType.GetGenericArguments();
                var resultType = genericArgs[genericArgs.Length - 1];
                var resultTypeService = new TypedService(resultType);

                if (registeredServicesTest(resultTypeService))
                {
                    var factoryGeneratorType = typeof(FactoryGenerator<>).MakeGenericType(ts.ServiceType);
                    var factory = Activator.CreateInstance(factoryGeneratorType, new object[] { resultTypeService });
                    var genFactoryMethod = factoryGeneratorType.GetMethod("GenerateFactory");

                    registration = new ComponentRegistration(
                        Guid.NewGuid(),
                        new DelegateActivator(ts.ServiceType, (c, p) => genFactoryMethod.Invoke(factory, new object[] {c, p})),
                        new CurrentScopeLifetime(),
                        InstanceSharing.None,
                        InstanceOwnership.ExternallyOwned,
                        new Service[] { new TypedService(ts.ServiceType) },
                        new Dictionary<string, object>());

                    return true;
                }
            }

            registration = null;
            return false;
        }
    }
}
