// This software is part of the Autofac IoC container
// Copyright (c) 2007 - 2008 Autofac Contributors
// http://autofac.org
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Autofac.Lifetime;
using Autofac.Core.Activators;
using Autofac.Registration;
using Autofac.Core.Activators.Delegate;

namespace Autofac.GeneratedFactories
{
    class AutoGeneratedFactoryRegistrationSource : IRegistrationSource
    {
        public bool TryGetRegistration(Service service, Func<Service, bool> registeredServicesTest, out IComponentRegistration registration)
        {
            Enforce.ArgumentNotNull(service, "service");
            Enforce.ArgumentNotNull(registeredServicesTest, "registeredServicesTest");

            var ts = service as TypedService;
            if (ts != null && ts.ServiceType.IsFunction())
            {
                var resultType = ts.ServiceType.FunctionReturnType();
                var resultTypeService = new TypedService(resultType);

                if (registeredServicesTest(resultTypeService))
                {
                    var factory = new FactoryGenerator(ts.ServiceType, resultTypeService, ParameterMapping.Adaptive);

                    registration = new ComponentRegistration(
                        Guid.NewGuid(),
                        new DelegateActivator(ts.ServiceType, (c, p) => factory.GenerateFactory(c, p)),
                        new CurrentScopeLifetime(),
                        InstanceSharing.None,
                        InstanceOwnership.ExternallyOwned,
                        new Service[] { new TypedService(ts.ServiceType) },
                        new Dictionary<string, object>());

                    return true;
                }
            }

            registration = null;
            return false;
        }
    }
}
